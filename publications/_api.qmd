---
title: "Publications prep script"
---


```{r}
#| echo: false
#| output: asis
library(httr2)
library(stringr)
library(purrr)

req1 <-
  request("https://api.zotero.org") |>
  req_url_query(
    v = 3,
    include = "data",
    sort = "date",
    itemType = "-attachment || note", 
    limit = 5,
    linkwrap = 1
  ) |>
  req_headers(`Zotero-API-Key` = Sys.getenv("ZOTERO_API_KEY")) |>
  req_url_path("users", Sys.getenv("ZOTERO_USER_ID"), "publications", "items") |> 
  req_retry()

req2 <-
  request("https://api.zotero.org") |>
  req_url_query(
    v = 3,
    include = "bib",
    sort = "date",
    # style = "journal-of-ecology",
    # style = "apa",
    # style = "american-physics-society",
    itemType = "-attachment || note", 
    limit = 5,
    linkwrap = 1
  ) |>
  req_headers(`Zotero-API-Key` = Sys.getenv("ZOTERO_API_KEY")) |>
  req_url_path("users", Sys.getenv("ZOTERO_USER_ID"), "publications", "items") |> 
  req_retry()

resp1 <- 
  req1 |> 
  req_perform() |> 
  resp_body_json() |> 
  purrr::map("data") 


titles <- map(resp1, ~ .x$title)

resp2 <- 
  req2 |> 
  req_perform() |> 
  resp_body_json() |> 
  purrr::map("bib") 



# resp_unformat <- resp2 |> 
#   resp_body_json() |>  
#   purrr::map("data") |> 
#   unlist() 

# n_entries <- length(resp_unformat)

# pub_count <- 1:n_entries

resp_format <- resp2 |>
  unlist() |> 
  # surround URLs with <> so they are actually links in markdown
  # str_replace(url_pattern, "<\\1>") |> 
  # Bold my name 
  str_replace("(Masiello, D\\. J\\.)", '<b>\\1</b>') |> 
  str_replace("(David J\\. Masiello)", '<b>\\1</b>') |> 
  str_replace("(Masiello, David John)", '<b>\\1</b>')


cat(resp_format)
```

::: {#refs}
:::